package matrixMultiplication;
import java.util.Scanner;

public class matrixMultiplication {

	// return a random m-by-n matrix with values between 0 and 1
    public static double[][] random(int m, int n) {
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = Math.random();
        return C;
    }
	
   public static void main(String[] args) {
     
      
       double[][] a = random(4,4); 
       double[][] b = random(4,4);
       
       
       double[][] c = multiply(a, b);
       double[][] d = multiplyStrassen(a,b);
       
       
       System.out.println("Product of A and B using iterative is");
       for (int i = 0; i < c.length; i++) {
           for (int j = 0; j < c[0].length; j++) {
               System.out.print(c[i][j] + " ");
           }
           System.out.println();
       }
       
       System.out.println("\n\n");
       System.out.println("Product of A and B using strassen is");
       for (int i = 0; i < d.length; i++) {
           for (int j = 0; j < d[0].length; j++) {
               System.out.print(d[i][j] + " ");
           }
           System.out.println();
       }
   }
   
   
   

   public static double[][] multiply(double[][] a, double[][] b) {
       int rowsInA = a.length;
       int columnsInA = a[0].length; // same as rows in B
       int columnsInB = b[0].length;
       double[][] c = new double[rowsInA][columnsInB];
       for (int i = 0; i < rowsInA; i++) {
           for (int j = 0; j < columnsInB; j++) {
               for (int k = 0; k < columnsInA; k++) {
                   c[i][j] = c[i][j] + a[i][k] * b[k][j];
               }
           }
       }
       return c;
   }
   
   public static void initialize(double[][] A, double[][] B){
	   
	   
   }
   
   public static double[][] multiplyStrassen(double[][] mat1, double[][] mat2)
   {        
       int n = mat1.length;
       double[][] R = new double[n][n];
       if (n == 1)
           R[0][0] = mat1[0][0] * mat2[0][0];
       else
       {
           double[][] A11 = new double[n/2][n/2];
           double[][] A12 = new double[n/2][n/2];
           double[][] A21 = new double[n/2][n/2];
           double[][] A22 = new double[n/2][n/2];
           double[][] B11 = new double[n/2][n/2];
           double[][] B12 = new double[n/2][n/2];
           double[][] B21 = new double[n/2][n/2];
           double[][] B22 = new double[n/2][n/2];
           divide(mat1, A11, 0 , 0);
           divide(mat1, A12, 0 , n/2);
           divide(mat1, A21, n/2, 0);
           divide(mat1, A22, n/2, n/2);
           divide(mat2, B11, 0 , 0);
           divide(mat2, B12, 0 , n/2);
           divide(mat2, B21, n/2, 0);
           divide(mat2, B22, n/2, n/2);
           double [][] M1 = multiply(merge(A11, A22), merge(B11, B22));
           double [][] M2 = multiply(merge(A21, A22), B11);
           double [][] M3 = multiply(A11, sub(B12, B22));
           double [][] M4 = multiply(A22, sub(B21, B11));
           double [][] M5 = multiply(merge(A11, A12), B22);
           double [][] M6 = multiply(sub(A21, A11), merge(B11, B12));
           double [][] M7 = multiply(sub(A12, A22), merge(B21, B22));
           double [][] C11 = merge(sub(merge(M1, M4), M5), M7);
           double [][] C12 = merge(M3, M5);
           double [][] C21 = merge(M2, M4);
           double [][] C22 = merge(sub(merge(M1, M3), M2), M6);
           mergeTwo(C11, R, 0 , 0);
           mergeTwo(C12, R, 0 , n/2);
           mergeTwo(C21, R, n/2, 0);
           mergeTwo(C22, R, n/2, n/2);
       }   
       return R;
   }
   public static double[][] sub(double[][] mat1, double[][] mat2)
   {
       int n = mat1.length;
       double[][] C = new double[n][n];
       for (int i = 0; i < n; i++)
           for (int j = 0; j < n; j++)
               C[i][j] = mat1[i][j] - mat2[i][j];
       return C;
   }
   public static double[][] merge(double[][] mat1, double[][] mat2)
   {
       int n = mat1.length;
       double[][] C = new double[n][n];
       for (int i = 0; i < n; i++)
           for (int j = 0; j < n; j++)
               C[i][j] = mat1[i][j] + mat2[i][j];
       return C;
   }
   public static void divide(double[][] P, double[][] C, int iB, int jB) 
   {
       for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
           for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
               C[i1][j1] = P[i2][j2];
   }
   public static void mergeTwo(double[][] C, double[][] P, int iB, int jB) 
   {
       for(int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
           for(int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
               P[i2][j2] = C[i1][j1];
   }    
}
